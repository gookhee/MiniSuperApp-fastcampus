//
//  AddPaymentMethodInteractor.swift
//  MiniSuperApp
//
//  Created by 정국희 on 2022/02/20.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import Combine
import FinanceEntity
import FinanceRepository
import AddPaymentMethod

// MARK: - AddPaymentMethodInteractor

final class AddPaymentMethodInteractor {
    var presenter: AddPaymentMethodPresentationLogic?
    var router: AddPaymentMethodRoutingLogic?
    private let worker: AddPaymentMethodWorkingLogic
    private weak var listener: AddPaymentMethodListener?
    private let dependency: AddPaymentMethodInteractorDependency
    private var cancellables: Set<AnyCancellable>
    
    /// 자유롭게 매개변수 추가하기. worker, listener 등등  (Add parameters freely. worker, listener, etc)
    init(
        worker: AddPaymentMethodWorkingLogic,
        listener: AddPaymentMethodListener,
        dependency: AddPaymentMethodInteractorDependency
    ) {
        self.worker = worker
        self.listener = listener
        self.dependency = dependency
        cancellables = .init()
    }
}

// MARK: - AddPaymentMethodRequestLogic

extension AddPaymentMethodInteractor: AddPaymentMethodRequestLogic {
    func process(_ request: AddPaymentMethod.Request.OnClose) {
        listener?.listenToCloseButtonTappedFromAddPaymentMethod()
    }
    
    func process(_ request: AddPaymentMethod.Request.OnConfirm) {
        dependency.cardOnFileRepository.addCard(
            info: .init(number: request.number, cvc: request.cvc, expiration: request.expiry)
        )
            .sink(
                receiveCompletion: { _ in },
                receiveValue: {[weak self] method in
                    self?.listener?.listenToPaymentMethodAdded(paymentMethod: method)
                }
            )
            .store(in: &cancellables)
    }
    
}

// MARK: - AddPaymentMethodRequestLogic definition

protocol AddPaymentMethodRequestLogic {
    /// 외부매개변수는 제외하기
    func process(_ request: AddPaymentMethod.Request.OnClose)
    func process(_ request: AddPaymentMethod.Request.OnConfirm)
}

// MARK: - AddPaymentMethodWorkingLogic definition

protocol AddPaymentMethodWorkingLogic {
    /// 자유롭게 매개변수 추가하기 (Add parameters freely)
}

// MARK: - AddPaymentMethodPresentationLogic definition

protocol AddPaymentMethodPresentationLogic {
    /// 외부매개변수는 제외하기
    func present(_ response: AddPaymentMethod.Response)
}

// MARK: - AddPaymentMethodRoutingLogic definition

protocol AddPaymentMethodRoutingLogic {
    /// 자유롭게 매개변수 추가하기 (Add parameters freely)
}

// MARK: - AddPaymentMethodInteractorDependency

protocol AddPaymentMethodInteractorDependency {
    var cardOnFileRepository: CardOnFileRepositoryAvailable { get }
}
