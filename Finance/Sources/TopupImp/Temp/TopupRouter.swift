//
//  TopupRouter.swift
//  MiniSuperApp
//
//  Created by 정국희 on 2022/03/27.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

import Topup
import AddPaymentMethod
import FinanceEntity
import RIBsUtil

// MARK: - TopupRouter

final class TopupRouter: NSObject {
    weak var viewController: TopupBaseViewControllable?
    
    private var navigationController: UINavigationController?
    
    private let addPaymentMethodBuildable: AddPaymentMethodBuildingLogic
    private var addPaymentMethodRouting: UIViewController?
    
    private let enterAmountBuildable: EnterAmountBuildingLogic
    private var enterAmountRouting: UIViewController?
    
    private let cardOnFileBuildable: CardOnFileBuildingLogic
    private var cardOnFileRouting: UIViewController?
    
    /// 자유롭게 다른 scene builder 추가하기 (Freely add builders of different scenes)
    init(
        viewController: TopupBaseViewControllable,
        addPaymentMethodBuildable: AddPaymentMethodBuildingLogic,
        enterAmountBuildable: EnterAmountBuildingLogic,
        cardOnFileBuildable: CardOnFileBuildingLogic
    ) {
        self.viewController = viewController
        self.addPaymentMethodBuildable = addPaymentMethodBuildable
        self.enterAmountBuildable = enterAmountBuildable
        self.cardOnFileBuildable = cardOnFileBuildable
    }
}

// MARK: - TopupRoutingLogic

extension TopupRouter: TopupRoutingLogic {
    func cleanupViews() {
        // TODO: Since this router does not own its view, it needs to cleanup the views
        // it may have added to the view hierarchy, when its interactor is deactivated.
        guard
            nil != viewController?.presentedViewController,
            nil != navigationController
        else { return }
        
        navigationController?.dismiss(animated: true)
    }
    
    func attachAddPaymentMethod(closeButtonType: DismissButtonType, listener: AddPaymentMethodListener) {
        guard nil == addPaymentMethodRouting else { return }
        
        let destination = addPaymentMethodBuildable.build(listener: listener, closeButtonType: .close)
        
        if let navigationController = navigationController {
            navigationController.pushViewController(destination, animated: true)
        } else {
            presentInsideNavigation(destination)
        }

        addPaymentMethodRouting = destination
    }
    
    func detachAddPaymentMethod() {
        guard nil == addPaymentMethodRouting else { return }
        
        navigationController?.popViewController(animated: true)
        
        addPaymentMethodRouting = nil
    }
    
    func attachEnterAmount(listener: EnterAmountListener) {
        guard nil == enterAmountRouting else { return }
        
        let viewController = enterAmountBuildable.build(withListener: listener)
        
        if let navigationController = navigationController {
            /// 첫화면 카드 추가 -> 카드 추가 후
            navigationController.setViewControllers([viewController], animated: true)
            resetChildRouting()
        } else {
            /// 첫 화면이 충전하기
            presentInsideNavigation(viewController)
        }
        
        enterAmountRouting = viewController
    }
    
    func detachEnterAmount() {
        guard nil != enterAmountRouting else { return }
        
        dismissPresentedNavigation(completion: nil)
        
        enterAmountRouting = nil
    }
    
    func attachCardOnFile(paymentMethods: [PaymentMethod], listener: CardOnFileListener) {
        guard nil == cardOnFileRouting else { return }
        
        let viewConroller = cardOnFileBuildable.build(listener: listener, paymentMethods: paymentMethods)
        navigationController?.pushViewController(viewConroller, animated: true)
        cardOnFileRouting = viewConroller
    }
    
    func detachCardOnFile() {
        guard nil != cardOnFileRouting else { return }
        
        navigationController?.popViewController(animated: true)
        cardOnFileRouting = nil
    }
    
    func popToRoot() {
        navigationController?.popToRootViewController(animated: true)
        resetChildRouting()
    }
}

// MARK: - private

extension TopupRouter {
    private func presentInsideNavigation(_ viewControllable: UIViewController) {
        let navigationController = UINavigationController(rootViewController: viewControllable)
        navigationController.navigationBar.isTranslucent = false
        navigationController.navigationBar.backgroundColor = .white
        navigationController.navigationBar.scrollEdgeAppearance = navigationController.navigationBar.standardAppearance
        self.navigationController = navigationController
        navigationController.presentationController?.delegate = viewController?.presentationDelegate
        viewController?.present(navigationController, animated: true, completion: nil)
    }
    
    private func dismissPresentedNavigation(completion: (() -> Void)?) {
        guard nil != navigationController else { return }
        
        viewController?.dismiss(animated: true, completion: completion)
        navigationController = nil
    }
    
    private func resetChildRouting() {
        if nil != cardOnFileRouting {
            cardOnFileRouting = nil
        }
        
        if nil != addPaymentMethodRouting {
            addPaymentMethodRouting = nil
        }
    }
}
