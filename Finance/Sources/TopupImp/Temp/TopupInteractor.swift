//
//  TopupInteractor.swift
//  MiniSuperApp
//
//  Created by 정국희 on 2022/03/27.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

import FinanceRepository
import CombineUtil
import FinanceEntity
import SuperUI
import FoundationExt
import Topup
import CleanSwiftUtil
import AddPaymentMethod

// MARK: - TopupInteractor

final class TopupInteractor {
    var router: TopupRoutingLogic?
    private let worker: TopupWorkingLogic
    private let dependency: TopupInteractorDependency
    private weak var listener: TopupListener?
    private var paymentMethods: [PaymentMethod] {
        dependency.cardOnFileRepository.cardOnFile.value
    }
    private var isEnterAmountRoot = false
    
    /// 자유롭게 매개변수 추가하기. worker, listener 등등  (Add parameters freely. worker, listener, etc)
    init(worker: TopupWorkingLogic,  listener: TopupListener?, dependency: TopupInteractorDependency) {
        self.worker = worker
        self.dependency = dependency
        self.listener = listener
    }
}

extension TopupInteractor: ViewlessInteracting {
    func activate() {
        if let firstCard = dependency.cardOnFileRepository.cardOnFile.value.first {
            /// 충전 화면
            isEnterAmountRoot = true
            dependency.paymentMethodStream.send(firstCard)
            router?.attachEnterAmount(listener: self)
        } else {
            /// 카드 추가 화면
            isEnterAmountRoot = false
            router?.attachAddPaymentMethod(closeButtonType: .close, listener: self)
        }
    }
    
    func deactivate() {
        router?.cleanupViews()
    }
}

extension TopupInteractor: AddPaymentMethodListener {
    func listenToCloseButtonTappedFromAddPaymentMethod() {
        router?.detachAddPaymentMethod()
        if false == isEnterAmountRoot {
            listener?.listenToTopupClosed()
        }
    }

    func listenToPaymentMethodAdded(paymentMethod: PaymentMethod) {
        dependency.paymentMethodStream.send(paymentMethod)
        if isEnterAmountRoot {
            router?.popToRoot()
        } else {
            isEnterAmountRoot = true
            router?.attachEnterAmount(listener: self)
        }
    }
}

extension TopupInteractor: EnterAmountListener {
    func listenToCloseButtonTappedFromEnterAmount() {
        router?.detachEnterAmount()
        listener?.listenToTopupClosed()
    }

    func listenToPaymentMethodButtonTapped() {
        router?.attachCardOnFile(paymentMethods: paymentMethods, listener: self)
    }

    func listenToTopupFinishedFromEnterAmount() {
        listener?.listenToTopupFinished()
    }
}

extension TopupInteractor: CardOnFileListener {
    func listenToCloseButtonTappedFromCardOnFile() {
        router?.detachCardOnFile()
    }

    func listenToItemSelectedFromCardOnFile(at index: Int) {
        if let paymentMethod = paymentMethods[safe: index] {
            dependency.paymentMethodStream.send(paymentMethod)
            router?.detachCardOnFile()
        }
    }
    
    func listenToAddPaymentMethodButtonTappedFromCardOnFile() {
        router?.attachAddPaymentMethod(closeButtonType: .back, listener: self)
    }
}

// MARK: -  definition

protocol TopupWorkingLogic {
    /// 자유롭게 매개변수 추가하기 (Add parameters freely)
    func doSomeWork()
}


// MARK: - TopupRoutingLogic definition

protocol TopupRoutingLogic {
    func cleanupViews()
    // TODO: Declare methods the interactor can invoke to manage sub-tree via the router.
    func attachAddPaymentMethod(closeButtonType: DismissButtonType, listener: AddPaymentMethodListener)
    func detachAddPaymentMethod()
    func attachEnterAmount(listener: EnterAmountListener)
    func detachEnterAmount()
    func attachCardOnFile(paymentMethods: [PaymentMethod], listener: CardOnFileListener)
    func detachCardOnFile()
    func popToRoot()
}

// MARK: - TopupInteractorDependency

protocol TopupInteractorDependency {
    var cardOnFileRepository: CardOnFileRepositoryAvailable { get }
    var paymentMethodStream: CurrentValuePublisher<PaymentMethod> { get }
}
