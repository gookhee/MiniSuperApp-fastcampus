//
//  EnterAmountBuilder.swift
//  MiniSuperApp
//
//  Created by 정국희 on 2022/03/27.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

import CleanSwiftUtil
import CombineUtil
import FinanceEntity
import FinanceRepository

// MARK: - EnterAmountBuilder

final class EnterAmountBuilder: Builder<EnterAmountDependency> {

}

// MARK: - EnterAmountBuildingLogic

extension EnterAmountBuilder: EnterAmountBuildingLogic {
    
    func build(withListener listener: EnterAmountListener) -> Destination {
        let component = EnterAmountComponent(dependency: dependency)
        let viewController = EnterAmountViewController()
        let interactor = EnterAmountInteractor(
            worker: EnterAmountWorker(),
            listener: listener,
            dependency: component
        )
        let presenter = EnterAmountPresenter()
        let router = EnterAmountRouter(viewController: viewController)
        viewController.interactor = interactor
        interactor.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController

        return viewController
    }
}

// MARK: - EnterAmountBuildingLogic definition

protocol EnterAmountBuildingLogic {
    typealias Destination = EnterAmountViewController
    /// 자유롭게 매개변수 추가하기 (Add parameters freely)
    func build(withListener listener: EnterAmountListener) -> Destination
}

// MARK: - EnterAmountDependency

protocol EnterAmountDependency: CleanSwiftDependency {
    // TODO: Declare the set of dependencies required by this RIB, but cannot be
    // created by this RIB.
    var selectedPaymentMethod: ReadOnlyCurrentValuePublisher<PaymentMethod>  { get }
    var superPayRepository: SuperPayRepositoryAvailable { get }
}

// MARK: - EnterAmountComponent

final class EnterAmountComponent: CleanSwiftComponent<EnterAmountDependency>, EnterAmountInteractorDependency {
    var superPayRepository: SuperPayRepositoryAvailable { dependency.superPayRepository }

    var selectedPaymentMethod: ReadOnlyCurrentValuePublisher<PaymentMethod> {
        dependency.selectedPaymentMethod
    }

    // TODO: Declare 'fileprivate' dependencies that are only used by this RIB.

}
