//
//  EnterAmountViewController.swift
//  MiniSuperApp
//
//  Created by 정국희 on 2022/03/27.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - EnterAmountViewController

final class EnterAmountViewController: UIViewController {
    var interactor: EnterAmountRequestLogic?

    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupViews()
        interactor?.process(EnterAmount.Request.OnLoad())
    }
    
    private lazy var selectedPaymentMethodView: SelectedPaymentMethodView = {
        let view = SelectedPaymentMethodView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.addShadowWithRoundedCorners()
        let tap = UITapGestureRecognizer(target: self, action: #selector(didTapPaymentMethod))
        view.addGestureRecognizer(tap)
        return view
    }()
    
    private let enterAmountWidget: EnterAmountWidget = {
        let widget = EnterAmountWidget()
        widget.translatesAutoresizingMaskIntoConstraints = false
        widget.addShadowWithRoundedCorners()
        return widget
    }()
    
    private lazy var ctaButton: UIButton = {
        let cta = UIButton(type: .system)
        cta.translatesAutoresizingMaskIntoConstraints = false
        cta.roundCorners()
        cta.setTitle("충전", for: .normal)
        cta.titleLabel?.font = UIFont.systemFont(ofSize: 20, weight: .semibold)
        cta.setBackgroundImage(UIImage(color: .primaryRed), for: .normal)
        cta.tintColor = .white
        cta.addTarget(self, action: #selector(didTapCTAButton), for: .touchUpInside)
        return cta
    }()
    
    private let activityIndicator: UIActivityIndicatorView = {
        let activity = UIActivityIndicatorView(style: .medium)
        activity.translatesAutoresizingMaskIntoConstraints = false
        activity.hidesWhenStopped = true
        activity.stopAnimating()
        return activity
    }()

    private func setupViews() {
        title = "충전하기"
        view.backgroundColor = .backgroundColor
        
        setupNavigationItem(with: .close, target: self, action: #selector(didTapClose))
        
        view.addSubview(selectedPaymentMethodView)
        view.addSubview(enterAmountWidget)
        view.addSubview(ctaButton)
        view.addSubview(activityIndicator)
        
        NSLayoutConstraint.activate([
            selectedPaymentMethodView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            selectedPaymentMethodView.topAnchor.constraint(equalTo: view.topAnchor, constant: 20),
            selectedPaymentMethodView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            selectedPaymentMethodView.heightAnchor.constraint(equalToConstant: 70),
            
            enterAmountWidget.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            enterAmountWidget.topAnchor.constraint(equalTo: selectedPaymentMethodView.bottomAnchor, constant: 20),
            enterAmountWidget.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            
            ctaButton.heightAnchor.constraint(equalToConstant: 60),
            ctaButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            ctaButton.topAnchor.constraint(equalTo: enterAmountWidget.bottomAnchor, constant: 40),
            ctaButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            
            activityIndicator.centerXAnchor.constraint(equalTo: ctaButton.centerXAnchor),
            activityIndicator.centerYAnchor.constraint(equalTo: ctaButton.centerYAnchor),
    ])
    }
    
    @objc
    private func didTapClose() {
        interactor?.process(EnterAmount.Request.OnClose())
    }
    
    @objc
    private func didTapCTAButton() {
        if let amount = enterAmountWidget.text.flatMap(Double.init) {
            interactor?.process(EnterAmount.Request.OnTopup(amount: amount))
        }
    }
    
    @objc
    private func didTapPaymentMethod() {
        interactor?.process(EnterAmount.Request.OnAddPaymentMethod())
    }
}

// MARK: - EnterAmountDisplayLogic

extension EnterAmountViewController: EnterAmountDisplayLogic {
    
    func display(_ viewModel: EnterAmount.ViewModel.SelectedPaymentMethod) {
        selectedPaymentMethodView.update(with: viewModel)
    }
    
    func display(_ viewModel: EnterAmount.ViewModel.LoadingIndicator) {
        if viewModel.show {
            activityIndicator.startAnimating()
        } else {
            activityIndicator.stopAnimating()
        }
        ctaButton.isEnabled = !viewModel.show
    }
}
