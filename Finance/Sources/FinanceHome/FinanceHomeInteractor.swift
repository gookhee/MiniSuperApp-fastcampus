//
//  FinanceHomeInteractor.swift
//  MiniSuperApp
//
//  Created by 정국희 on 2022/03/27.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

import FinanceEntity
import AddPaymentMethod
import Topup

// MARK: - FinanceHomeInteractor

final class FinanceHomeInteractor {
    var presenter: FinanceHomePresentationLogic?
    var router: FinanceHomeRoutingLogic?
    private let worker: FinanceHomeWorkingLogic
    weak var listener: FinanceHomeListener?

    /// 자유롭게 매개변수 추가하기. worker, listener 등등  (Add parameters freely. worker, listener, etc)
    init(
        worker: FinanceHomeWorkingLogic,
        listener: FinanceHomeListener?
    ) {
        self.worker = worker
        self.listener = listener
    }
}

// MARK: - FinanceHomeRequestLogic

extension FinanceHomeInteractor: FinanceHomeRequestLogic {
    func process(_ request: FinanceHome.Request.OnLoad) {
    }
    
    func process(_ request: FinanceHome.Request.OnViewDidDismiss) {
        /// 여기서 다 호출해줘야함
        router?.detachAddPaymentMethod()
        router?.detachTopup()
    }
}

// MARK: - CardOnFileDashboardListener

extension FinanceHomeInteractor: CardOnFileDashboardListener {
    func listenToAddPaymentMethodButtonPressed() {
        router?.attachAddPaymentMethod(listener: self)
    }
}

// MARK: - AddPaymentMethodListener

extension FinanceHomeInteractor: AddPaymentMethodListener {
    func listenToCloseButtonTappedFromAddPaymentMethod() {
        router?.detachAddPaymentMethod()
    }

    func listenToPaymentMethodAdded(paymentMethod: PaymentMethod) {
        router?.detachAddPaymentMethod()
    }
}

// MARK: - SuperPayDashboardListener

extension FinanceHomeInteractor: SuperPayDashboardListener {
    func listenToTopupButtonTapped() {
        router?.attachTopup(listener: self)
    }
}

// MARK: - TopupListener

extension FinanceHomeInteractor: TopupListener {
    func listenToTopupClosed() {
        router?.detachTopup()
    }

    func listenToTopupFinished() {
        router?.detachTopup()
    }
}

// MARK: - FinanceHomeRequestLogic definition

protocol FinanceHomeRequestLogic {
    /// 외부매개변수는 제외하기
    func process(_ request: FinanceHome.Request.OnLoad)
    func process(_ request: FinanceHome.Request.OnViewDidDismiss)
}

// MARK: - FinanceHomeWorkingLogic definition

protocol FinanceHomeWorkingLogic {
    /// 자유롭게 매개변수 추가하기 (Add parameters freely)
    func doSomeWork()
}

// MARK: - FinanceHomePresentationLogic definition

protocol FinanceHomePresentationLogic {
    /// 외부매개변수는 제외하기
    func present(_ response: FinanceHome.Response)
}

// MARK: - FinanceHomeRoutingLogic definition

protocol FinanceHomeRoutingLogic {
    /// 자유롭게 매개변수 추가하기 (Add parameters freely)
    func attachAddPaymentMethod(listener: AddPaymentMethodListener)
    func detachAddPaymentMethod()
    func attachTopup(listener: TopupListener)
    func detachTopup()
}

// MARK: - FinanceHomeListener

public protocol FinanceHomeListener: AnyObject {
    // TODO: Declare methods the interactor can invoke to communicate with other RIBs.
}

