//
//  FinanceHomeBuilder.swift
//  MiniSuperApp
//
//  Created by 정국희 on 2022/03/27.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

import FinanceRepository
import AddPaymentMethod
import FinanceRepository
import CombineUtil
import Topup
import CleanSwiftUtil

// MARK: - FinanceHomeBuilder

public final class FinanceHomeBuilder: Builder<FinanceHomeDependency> {

}

// MARK: - FinanceHomeBuildingLogic

extension FinanceHomeBuilder: FinanceHomeBuildingLogic {
    public func build(withListener listener: FinanceHomeListener) -> Destination {
        let component = FinanceHomeComponent(dependency: dependency)
        let interactor = FinanceHomeInteractor(
            worker: FinanceHomeWorker(),
            listener: listener
        )
        let presenter = FinanceHomePresenter()
        let superPayDashboard = SuperPayDashboardBuilder(dependency: component)
            .build(withListener: interactor)
        let cardOnFileDashboard = CardOnFileDashboardBuilder(dependency: component)
            .build(withListener: interactor)
        let viewController = FinanceHomeViewController(
            dashboards: [superPayDashboard, cardOnFileDashboard]
        )
        let router = FinanceHomeRouter(
            viewController: viewController,
            addPaymentMethodBuildable: component.addPaymentMethodBuildable,
            topupBuildable: component.topupBuildable
        )
        viewController.interactor = interactor
        interactor.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController

        return viewController
    }

}

// MARK: - FinanceHomeBuildingLogic definition

public protocol FinanceHomeBuildingLogic {
    typealias Destination = UIViewController
    /// 자유롭게 매개변수 추가하기 (Add parameters freely)
    func build(withListener listener: FinanceHomeListener) -> Destination
}

// MARK: - FinanceHomeDependency

public protocol FinanceHomeDependency: Dependency {
    // TODO: Declare the set of dependencies required by this RIB, but cannot be
    // created by this RIB.
    var superPayRepository: SuperPayRepositoryAvailable { get }
    var cardOnFileRepository: CardOnFileRepositoryAvailable { get }
    var topupBuildable: TopupBuildingLogic { get }
    var addPaymentMethodBuildable: AddPaymentMethodBuildingLogic { get }
}

// MARK: - FinanceHomeComponent

/// 자식리블렛의 의존성을 여기서 충족시켜줘야함
final class FinanceHomeComponent: Component<FinanceHomeDependency>, SuperPayDashboardDependency, CardOnFileDashboardDependency {
    var cardOnFileRepository: CardOnFileRepositoryAvailable { dependency.cardOnFileRepository }
    var superPayRepository: SuperPayRepositoryAvailable { dependency.superPayRepository }
    var topupBuildable: TopupBuildingLogic { dependency.topupBuildable }
    var addPaymentMethodBuildable: AddPaymentMethodBuildingLogic { dependency.addPaymentMethodBuildable }

    /// 자식리블렛에서는 값을 읽기전용 타입을 넘김
    var balance: ReadOnlyCurrentValuePublisher<Double> { superPayRepository.balance }
}
