//
//  FinanceHomeRouter.swift
//  MiniSuperApp
//
//  Created by 정국희 on 2022/03/27.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

import AddPaymentMethod
import Topup
import SuperUI
import CleanSwiftUtil

// MARK: - FinanceHomeRouter

final class FinanceHomeRouter: NSObject {
    weak var viewController: FinanceHomeViewControllable?

    private let addPaymentMethodBuildable: AddPaymentMethodBuildingLogic
    private var addPaymentMethodRouting: UIViewController?
    
    private let topupBuildable: TopupBuildingLogic
    private var topupRouting: ViewlessInteracting?
    
    init(
        viewController: FinanceHomeViewControllable,
        addPaymentMethodBuildable: AddPaymentMethodBuildingLogic,
        topupBuildable: TopupBuildingLogic
    ) {
        self.viewController = viewController
        self.addPaymentMethodBuildable = addPaymentMethodBuildable
        self.topupBuildable = topupBuildable
    }
}

// MARK: - FinanceHomeRoutingLogic

extension FinanceHomeRouter: FinanceHomeRoutingLogic {
    func attachAddPaymentMethod(listener: AddPaymentMethodListener) {
        guard nil == addPaymentMethodRouting else { return }
        
        let destination = addPaymentMethodBuildable.build(listener: listener, closeButtonType: .close)
        
        let navigationController = UINavigationController(rootViewController: destination)
        navigationController.navigationBar.isTranslucent = false
        navigationController.navigationBar.backgroundColor = .white
        navigationController.navigationBar.scrollEdgeAppearance = navigationController.navigationBar.standardAppearance
 
        navigationController.presentationController?.delegate = viewController?.presentationDelegate
        viewController?.present(navigationController, animated: true, completion: nil)
        
        addPaymentMethodRouting = destination
    }
    
    func detachAddPaymentMethod() {
        guard nil != addPaymentMethodRouting else { return }
        
        viewController?.dismiss(animated: true, completion: nil)
        
        addPaymentMethodRouting = nil
    }
    
    func attachTopup(listener: TopupListener) {
        guard
            nil == topupRouting,
            let viewController = viewController
        else { return }
        
        let destination = topupBuildable.build(
            withListener: listener,
            topupBaseViewController: viewController
        )
        
        destination.activate()
        
        topupRouting = destination
    }
    
    func detachTopup() {
        guard nil != topupRouting else { return }
        
        topupRouting?.deactivate()
        topupRouting = nil
    }
}

// MARK: - FinanceHomeViewControllable

protocol FinanceHomeViewControllable: TopupBaseViewControllable {
    // TODO: Declare methods the router invokes to manipulate the view hierarchy.
}
