//
//  SuperPayDashboardInteractor.swift
//  MiniSuperApp
//
//  Created by 정국희 on 2022/03/27.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

import Combine
import CombineUtil

// MARK: - SuperPayDashboardInteractor

final class SuperPayDashboardInteractor {
    var presenter: SuperPayDashboardPresentationLogic?
    var router: SuperPayDashboardRoutingLogic?
    private let worker: SuperPayDashboardWorkingLogic
    private let listener: SuperPayDashboardListener
    private let dependency: SuperPayDashboardInteractorDependency
    private var cancellables: Set<AnyCancellable>

    /// 자유롭게 매개변수 추가하기. worker, listener 등등  (Add parameters freely. worker, listener, etc)
    init(
        worker: SuperPayDashboardWorkingLogic,
        listener: SuperPayDashboardListener,
        dependency: SuperPayDashboardInteractorDependency
    ) {
        self.worker = worker
        self.listener = listener
        self.dependency = dependency
        cancellables = .init()
    }
}

// MARK: - SuperPayDashboardRequestLogic

extension SuperPayDashboardInteractor: SuperPayDashboardRequestLogic {
    func process(_ request: SuperPayDashboard.Request.OnLoad) {
        dependency.balance
            .receive(on: DispatchQueue.main)
            .sink {[weak self] balance in
                self?.presenter?.present(.balance(amount: balance))
            }.store(in: &cancellables)
    }
    
    func process(_ request: SuperPayDashboard.Request.OnTopup) {
        listener.listenToTopupButtonTapped()
    }
}

// MARK: - SuperPayDashboardRequestLogic definition

protocol SuperPayDashboardRequestLogic {
    /// 외부매개변수는 제외하기
    func process(_ request: SuperPayDashboard.Request.OnLoad)
    func process(_ request: SuperPayDashboard.Request.OnTopup)
}

// MARK: - SuperPayDashboardWorkingLogic definition

protocol SuperPayDashboardWorkingLogic {
    /// 자유롭게 매개변수 추가하기 (Add parameters freely)
    func doSomeWork()
}

// MARK: - SuperPayDashboardPresentationLogic definition

protocol SuperPayDashboardPresentationLogic {
    /// 외부매개변수는 제외하기
    func present(_ response: SuperPayDashboard.Response)
}

// MARK: - SuperPayDashboardRoutingLogic definition

protocol SuperPayDashboardRoutingLogic {
    /// 자유롭게 매개변수 추가하기 (Add parameters freely)
}

// MARK: - SuperPayDashboardListener

protocol SuperPayDashboardListener: AnyObject {
    // TODO: Declare methods the interactor can invoke to communicate with other RIBs.
    func listenToTopupButtonTapped()
}

// MARK: - SuperPayDashboardInteractorDependency

protocol SuperPayDashboardInteractorDependency {
    var balance: ReadOnlyCurrentValuePublisher<Double> { get }
}
