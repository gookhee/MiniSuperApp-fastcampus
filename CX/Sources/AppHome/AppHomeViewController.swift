//
//  AppHomeViewController.swift
//  MiniSuperApp
//
//  Created by 정국희 on 2022/03/28.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - AppHomeViewController

final class AppHomeViewController: UIViewController {
    var interactor: AppHomeRequestLogic?

    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupViews()
        interactor?.process(AppHome.Request.OnLoad())
    }
    
    private let widgetStackView: UIStackView = {
        let stackView = UIStackView()
        stackView.translatesAutoresizingMaskIntoConstraints = false
        stackView.axis = .horizontal
        stackView.distribution = .fillEqually
        stackView.alignment = .top
        stackView.spacing = 20
        return stackView
    }()
    
    init() {
        super.init(nibName: nil, bundle: nil)
        
        tabBarItem = UITabBarItem(title: "홈", image: UIImage(systemName: "house"), selectedImage: UIImage(systemName: "house.fill"))
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        
        tabBarItem = UITabBarItem(title: "홈", image: UIImage(systemName: "house"), selectedImage: UIImage(systemName: "house.fill"))
    }
    
    private func setupViews() {
        title = "홈"

        view.backgroundColor = .backgroundColor
        view.addSubview(widgetStackView)
        
        NSLayoutConstraint.activate([
            widgetStackView.topAnchor.constraint(equalTo: view.topAnchor, constant: 20),
            widgetStackView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            widgetStackView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20)
    ])
    }
}

// MARK: - AppHomeDisplayLogic

extension AppHomeViewController: AppHomeDisplayLogic {
    func display(_ viewModel: AppHome.ViewModel.List) {
        let views = viewModel.items.map { item in
            HomeWidgetView(viewModel: item) {[weak self] in
                self?.interactor?.process(AppHome.Request.OnWidget(kind: item.kind))
            }
        }
        
        views.forEach {
            $0.addShadowWithRoundedCorners(12)
            widgetStackView.addArrangedSubview($0)
        }
    }
}
